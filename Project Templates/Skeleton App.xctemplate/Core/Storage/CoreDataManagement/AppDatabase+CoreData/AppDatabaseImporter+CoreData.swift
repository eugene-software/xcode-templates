//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//  Copyright Â© ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file is generated by custom SKELETON Xcode template.
//

import Foundation
import PromiseKit
import CoreData

class CoreDataWriter<ImportedType: Codable> {}

extension CoreDataWriter: DatabaseWriterProtocol where ImportedType: CoreDataCompatible {
    
    typealias WriteType = ImportedType
    
    static func deleteEntities(_ entity: WriteType.Type) -> Promise<Void> {
        
        return Promise<Void> { seal in
            
            CoreDataStorageController.shared.save(saveBlock: {
                CoreDataStorageController.shared.remove(entity: WriteType.self)
            }
            ){
                seal.fulfill(Void())
            }
        }
    }
    
    static func deleteRemote(_ objectToDelete: WriteType?, predicate: NSPredicate) -> Promise<Void> {
        
        return Promise<Void> { seal in
            
            CoreDataStorageController.shared.save(saveBlock: {
                CoreDataStorageController.shared.remove(object: objectToDelete, predicate: predicate)
            }
            ){
                seal.fulfill(Void())
            }
        }
    }
    
    static func importRemote(_ objectToImport: WriteType, predicate: NSPredicate?) -> Promise<Void> {

        let predicate = predicate ?? NSPredicate(key: objectToImport.primaryKeyName,
                                                 value: objectToImport.primaryKey)
        
        return Promise<Void> { seal in
            
            CoreDataStorageController.shared.save(saveBlock: {
                _ = CoreDataStorageController.shared.fetchOrCreate(object: objectToImport, predicate: predicate)
            }
            ){
                seal.fulfill(Void())
            }
        }
    }
    
    static func importRemoteList(_ objectsToImport: [WriteType]) -> Promise<Void> {
        
        return Promise<Void> { seal in
            CoreDataStorageController.shared.save(saveBlock: {
                objectsToImport.forEach {
                    let predicate = NSPredicate(key: $0.primaryKeyName, value: $0.primaryKey)
                    _ = CoreDataStorageController.shared.fetchOrCreate(object: $0, predicate: predicate)
                }
            }) {
                seal.fulfill(Void())
            }
        }
    }
}

