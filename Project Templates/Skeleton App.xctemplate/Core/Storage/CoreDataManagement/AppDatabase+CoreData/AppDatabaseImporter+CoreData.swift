//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//  Copyright Â© ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file is generated by custom SKELETON Xcode template.
//

import Foundation
import PromiseKit
import CoreData

class CoreDataWriter<ImportedType: Codable> {}

extension CoreDataWriter: DatabaseWriterProtocol where ImportedType: CoreDataCompatible {
    
    typealias WriteType = ImportedType
    
    static func reloadEntities(_ objectsToImport: [WriteType], predicate: NSPredicate?, valuesToBeReloaded: [String: Any?]?) -> Promise<Void> {
        return Promise<Void> { seal in
            
            let ids = objectsToImport.map { $0.primaryKey }
            
            let main = NSPredicate(format: "NOT (id IN %@)", argumentArray: [ids])
            let compound = NSCompoundPredicate(andPredicateWithSubpredicates: [predicate, main].compactMap { $0 })
            
            CoreDataStorageController.shared.save(saveBlock:
                {
                    if let values = valuesToBeReloaded {
                       CoreDataStorageController.shared.setValues(type: WriteType.self, values: values, predicate: compound)
                    } else {
                        CoreDataStorageController.shared.deletePersistentObjects(type: WriteType.self, with: compound)
                    }
                   objectsToImport.forEach {
                       _ = CoreDataStorageController.shared.fetchOrCreate(object: $0, id: $0.primaryKey)
                   }
               }
               ){
                   seal.fulfill(Void())
               }
        }
    }
    
    static func deleteEntities(_ entity: WriteType.Type) -> Promise<Void> {
        
        return Promise<Void> { seal in
            
            CoreDataStorageController.shared.save(saveBlock: {
                CoreDataStorageController.shared.remove(entity: WriteType.self)
            }
            ){
                seal.fulfill(Void())
            }
        }
    }
    
    static func deleteRemote(_ objectToDelete: WriteType?, with id: Int64, idKey: String = "id") -> Promise<Void> {
        
        return Promise<Void> { seal in
            
            CoreDataStorageController.shared.save(saveBlock: {
                CoreDataStorageController.shared.remove(object: objectToDelete, id: id, idKey: idKey)
            }
            ){
                seal.fulfill(Void())
            }
        }
    }
    
    static func importRemote(_ objectToImport: WriteType?, with id: Int64, idKey: String) -> Promise<Void> {

        return Promise<Void> { seal in
            
            CoreDataStorageController.shared.save(saveBlock: {
                _ = CoreDataStorageController.shared.fetchOrCreate(object: objectToImport, id: id, idKey: idKey)
            }
            ){
                seal.fulfill(Void())
            }
        }
    }
    
    static func importRemoteList(_ objectsToImport: [WriteType]) -> Promise<Void> {
        
        return Promise<Void> { seal in
            CoreDataStorageController.shared.save(saveBlock: {
                objectsToImport.forEach {
                    _ = CoreDataStorageController.shared.fetchOrCreate(object: $0, id: $0.primaryKey)
                }
            }) {
                seal.fulfill(Void())
            }
        }
    }
}

