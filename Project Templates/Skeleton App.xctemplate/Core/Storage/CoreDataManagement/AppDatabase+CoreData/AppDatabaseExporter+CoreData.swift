//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//  Copyright Â© ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file is generated by custom SKELETON Xcode template.
//

import Foundation
import CoreData

class CoreDataReader<ExportedType: Codable> { }

extension CoreDataReader: DatabaseReaderProtocol where ExportedType: CoreDataCompatible {
    
    typealias ReadType = ExportedType
    
    static func count(predicate: NSPredicate)  -> Int {
        return CoreDataStorageController.shared.count(type: ReadType.self, predicate: predicate, context: CoreDataStorageController.shared.viewContext)
    }
    
    static func exportRemote(with id: Int64, idKey: String) -> ReadType? {
        
        let controller = CoreDataStorageController.shared
        let objects = controller.findPersistentObjects(type: ReadType.self, with: NSPredicate(key: idKey, id: id), context: controller.viewContext)
        
        return objects?.first?.getObject() as? ReadType
    }
    
    static func exportRemoteList(with predicate: NSPredicate?) -> [ReadType]? {
        
        let controller = CoreDataStorageController.shared
        
        let objects = controller.findPersistentObjects(type: ReadType.self, with: predicate, context: controller.viewContext)
        
        print(String(format: "Export Remote List with %@", String(describing: ReadType.ManagedType.self)))
        
        return objects?.compactMap { obj in
            return obj.getObject() as? ReadType
        }
    }
}
