//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//  Copyright Â© ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file is generated by custom SKELETON Xcode template.
//

import Foundation
import CoreData
import PromiseKit

class CoreDataReader<ExportedType: Codable> { }

extension CoreDataReader: DatabaseReaderProtocol where ExportedType: CoreDataCompatible {
    
    typealias ReadType = ExportedType

    static func exportRemoteSingle(predicate: NSPredicate?) -> ReadType? {
        
        let controller = CoreDataStorageController.shared
        let objects = controller.query(type: ReadType.self,
                                       predicate: predicate,
                                       context: controller.viewContext,
                                       sortDescriptors: nil,
                                       fetchLimit: 1)
        
        return objects?.first?.getObject() as? ReadType
    }
    
    static func exportRemote(_ type: ReadType.Type, predicate: NSPredicate?) -> Promise<ReadType?> {
        
        let controller = CoreDataStorageController.shared
        let objects = controller.query(type: ReadType.self,
                                       predicate: predicate,
                                       context: controller.viewContext,
                                       sortDescriptors: nil,
                                       fetchLimit: 1)
        
        let object = objects?.first?.getObject() as? ReadType
        
        return Promise.value(object)
    }
    
    static func exportRemoteList(_ type: ReadType.Type, predicate: NSPredicate?, sort: [NSSortDescriptor]?) -> Promise<[ReadType]?> {
        
        let controller = CoreDataStorageController.shared
        
        let objects = controller.query(type: type,
                                       predicate: predicate,
                                       context: controller.viewContext,
                                       sortDescriptors: sort,
                                       fetchLimit: nil)
        
        let mapped = objects?.compactMap { obj in
            return obj.getObject() as? ReadType
        }
        
        return Promise.value(mapped)
    }
}
