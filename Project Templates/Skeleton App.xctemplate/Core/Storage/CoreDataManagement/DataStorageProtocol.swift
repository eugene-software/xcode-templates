//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//  Copyright Â© ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file is generated by custom SKELETON Xcode template.
//

import Foundation
import CoreData

protocol CoreDataCompatible {
    
    associatedtype ManagedType: CoreDataExportable
    
    /// a primary key for managed object to make internal relationships available
    ///
    var primaryKey: Any { get }
    
    /// a primary key for managed object to make internal relationships available
    ///
    var primaryKeyName: String { get }
    
    /// Initializes a new external object with DB object
    /// - Parameters:
    ///   - managedObject: an object to be init with
    ///
    init(managedObject: ManagedType)
}


protocol CoreDataExportable: NSManagedObject {
    
    associatedtype ExportType: CoreDataCompatible
    
    /// Configures core data object with external object
    /// - Parameters:
    ///   - object: an object to be updated with
    ///   - storage: Data storage object to perform additional operations with DB
    ///
    func configure(with object: ExportType, in storage: CoreDataStorageInterface)
    
    /// Gets external object from CoreData object
    ///
    func getObject() -> ExportType
}


// Data storage common methods
//
protocol CoreDataStorageInterface {
    
    /// Fetches an objects or crates it if such doesn't exist and 'object' is passed
    /// This method should be called inside "saveBlock" of "save" method
    /// - Parameters:
    ///   - objects: A CoreDataCompatible objects list from which a new is to be created/updated
    ///   - completion: a completion performed on context's thread
    /// - Returns: NSManagedObjectModel custom object related to Type passed in method
    ///
    func insertList<Type: CoreDataCompatible>(objects: [Type?], completion: @escaping () -> Void)
    
    /// Fetches a list of objects by passed NSPredicate
    /// - Parameters:
    ///   - type: CoreDataCompatible object custom type
    ///   - predicate: a predicate to fetch needed data
    /// - Returns: a list of NSManagedObjectModel custom objects
    ///
    func query<Type: CoreDataExportable>(type: Type.Type,
                                         predicate: NSPredicate?,
                                         sortDescriptors: [NSSortDescriptor]?,
                                         fetchLimit: Int?) -> [Type]?
    
    /// Asynchronously Fetches a list of objects by passed NSPredicate
    /// - Parameters:
    ///   - type: CoreDataCompatible object custom type
    ///   - predicate: a predicate to fetch needed data
    ///   - completion: a completion performed on context's thread
    /// - Returns: a list of NSManagedObjectModel custom objects
    ///
    func asyncQuery<Type: CoreDataExportable>(type: Type.Type,
                                              predicate: NSPredicate?,
                                              sortDescriptors: [NSSortDescriptor]?,
                                              fetchLimit: Int?,
                                              completion: @escaping ([Type]?) -> Void)
    
    /// Deletes a list of objects by passed NSPredicate
    /// - Parameters:
    ///   - type: CoreDataCompatible object custom type
    ///   - predicate: a predicate to delete needed data
    ///   - completion: a completion performed on context's thread
    ///
    func delete<Type: CoreDataExportable>(_ type: Type.Type, with predicate: NSPredicate?, completion: @escaping () -> Void)
    
    /// Computes Integer result
    /// - Parameters:
    ///   - type: CoreDataCompatible object custom type
    ///   - operation: Name of operation
    ///   - keyPath: Keypath for operation, should be a number
    ///   - predicate: a predicate to select needed data
    ///
    func compute<Type: CoreDataExportable>(_ type: Type.Type, operation: String, keyPath: String, predicate: NSPredicate?) -> Int?
    
    /// Gives FetchedResultsProvider object for UI collections
    /// - Parameters:
    ///   - type: CoreDataCompatible object custom type
    ///   - mainPredicate: a predicate for selecting data
    ///   - optionalPredicates: predicates for filtering data.
    ///   - sorting: sort descriptors for sorting
    ///   - sectionName: sections name field for sorting by sections
    ///   - fetchLimit: a limit to fetch
    /// - Returns: a FetchedResultsProviderInterface for UI collections
    ///
    func fetchedResultsProvider<Type: CoreDataCompatible>(_ type: Type.Type,
                                                          mainPredicate: NSPredicate,
                                                          optionalPredicates: [NSPredicate]?,
                                                          sorting sortDescriptors: [NSSortDescriptor],
                                                          sectionName: String?,
                                                          fetchLimit: Int?) -> FetchedResultsProviderInterface
}

