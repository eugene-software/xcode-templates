//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//  Copyright Â© ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file is generated by custom SKELETON Xcode template.
//

import Foundation
import CoreData

protocol CoreDataCompatible {
    
    associatedtype ManagedType: NSManagedObject, CoreDataExportable
    
    /// a primary key for managed object to make internal relationships available
    ///
    var primaryKey: Any { get }
    
    /// a primary key for managed object to make internal relationships available
    ///
    var primaryKeyName: String { get }
    
    /// Initializes a new external object with DB object
    /// - Parameters:
    ///   - managedObject: an object to be init with
    ///
    init(managedObject: ManagedType)
}


protocol CoreDataExportable {
    
    associatedtype ExportType: CoreDataCompatible
    
    /// Configures core data object with external object
    /// - Parameters:
    ///   - object: an object to be updated with
    ///   - storage: Data storage object to perform additional operations with DB
    ///
    func configure(with object: ExportType, in storage: CoreDataStorageInterface)
    
    /// Gets external object from CoreData object
    ///
    func getObject() -> ExportType
}


// Data storage common methods
//
protocol CoreDataStorageInterface {
    
    /// NSManagedObjectContext object related to main thread. SHould be used only for UI operations
    ///
    var viewContext: NSManagedObjectContext { get }
    
    /// Fetches an object or crates it if such doesn't exist and 'object' is passed
    /// This method should be called inside "saveBlock" of "save" method
    /// - Parameters:
    ///   - object: A CoreDataPersistable object from which a new is to be created/updated
    ///   - id: id value for search
    ///   - idKey: a key for Id to search
    ///   - context: Context from which we need to fetch
    /// - Returns: NSManagedObjectModel custom object related to Type passed in method
    ///
    func fetchOrCreate<Type: CoreDataCompatible>(object: Type?, predicate: NSPredicate?) -> Type.ManagedType?
    
    /// Fetches a list of objects by passed NSPredicate
    /// - Parameters:
    ///   - type: CoreDataCompatible object custom type
    ///   - predicate: a predicate to fetch needed data
    ///   - context: Context from which we need to fetch
    /// - Returns: a list of NSManagedObjectModel custom objects
    ///
    
    func query<Type: CoreDataCompatible>(type: Type.Type, predicate: NSPredicate?, context: NSManagedObjectContext?, sortDescriptors: [NSSortDescriptor]?, fetchLimit: Int?) -> [Type.ManagedType]?
    
    /// Asynchronously Fetches a list of objects by passed NSPredicate
    /// - Parameters:
    ///   - type: CoreDataCompatible object custom type
    ///   - predicate: a predicate to fetch needed data
    ///   - context: Context from which we need to fetch
    ///   - completion: a completion performed on context's thread
    /// - Returns: a list of NSManagedObjectModel custom objects
    ///
    func asyncQuery<Type>(type: Type.Type,
                          predicate: NSPredicate?,
                          context: NSManagedObjectContext?,
                          sortDescriptors: [NSSortDescriptor]?,
                          fetchLimit: Int?,
                          completion: @escaping ([Type.ManagedType]?) -> Void) where Type : CoreDataCompatible
    
    
    /// Deletes a list of objects by passed NSPredicate
    /// - Parameters:
    ///   - type: CoreDataCompatible object custom type
    ///   - predicate: a predicate to delete needed data
    ///
    
    func deletePersistentObjects<Type: CoreDataCompatible>(type: Type.Type, with predicate: NSPredicate?)
    
    /// Removes an object from database
    /// This method should be called inside "saveBlock" of "save" method
    /// - Parameters:
    ///   - type: CoreDataCompatible object custom type
    ///   - object: an object to be removed
    ///
    func remove<Type: CoreDataCompatible>(object: Type?, predicate: NSPredicate)
    
    /// Removes all objects by entity type from database
    /// This method should be called inside "saveBlock" of "save" method
    /// - Parameters:
    ///   - entity: an object type to be removed
    ///
    func remove<Type: CoreDataCompatible>(entity: Type.Type)
    
    /// Saves managed object context into persistent store
    /// - Parameters:
    ///   - saveBlock: this block is executed just before context.save() method. All modifying operations should be performed here
    ///   - completionBlock: this block is executed just after context.save() method in .main thread
    ///
    func save(saveBlock: @escaping () -> Void, completionBlock: @escaping () -> Void)
    
    /// This method tries to destroys and then recreates a new persistent database
    ///
    func destroyAndReloadDatabase(completion: (() -> Void)?)
    
    func deleteTables(but names: [String], completion: (() -> Void)?)
}

