//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//  Copyright Â© ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file is generated by custom SKELETON Xcode template.
//

import Foundation
import PromiseKit

protocol DatabaseReaderProtocol {
    
    associatedtype ReadType: Codable
    
    /// Efficiently exports Updatable object from the database.
    ///
    /// - Parameters:
    ///   - type: Type of object
    ///   - predicate: predicate for searching
    /// - Returns: A promise with object when the work is finished
    ///
    @discardableResult
    static func exportRemote(_ type: ReadType.Type, predicate: NSPredicate?) -> Promise<ReadType?>
    
    /// Efficiently exports Updatable object from the database.
    ///
    /// - Parameters:
    ///   - predicate: predicate for searching
    /// - Returns: A single object
    ///
    @discardableResult
    static func exportRemoteSingle(predicate: NSPredicate?) -> ReadType?
    
    /// Efficiently exports Updatable objects list from the database.
    ///
    /// - Parameters:
    ///   - type: Type of objects
    ///   - predicate: predicate for searching
    ///   - sort: sort descriptors for ordering
    /// - Returns: A promise with a list of objects when the work is finished
    ///
    @discardableResult
    static func exportRemoteList(_ type: ReadType.Type, predicate: NSPredicate?, sort: [NSSortDescriptor]?)  -> Promise<[ReadType]?>
}


class AppDatabaseExporter<ExportedType: Codable> {}

extension AppDatabaseExporter: DatabaseReaderProtocol where ExportedType: CoreDataCompatible {
    
    typealias Reader = CoreDataReader
    typealias ReadType = ExportedType

    static func exportRemoteSingle(predicate: NSPredicate?) -> ReadType? {
        return Reader<ReadType>.exportRemoteSingle(predicate: predicate)
    }
    
    static func exportRemote(_ type: ReadType.Type, predicate: NSPredicate?) -> Promise<ReadType?> {
        return Reader<ReadType>.exportRemote(type, predicate: predicate)
    }
    
    static func exportRemoteList(_ type: ReadType.Type, predicate: NSPredicate?, sort: [NSSortDescriptor]?) -> Promise<[ReadType]?> {
       return Reader<ReadType>.exportRemoteList(type, predicate: predicate, sort: sort)
    }
}
