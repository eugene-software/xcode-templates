//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//  Copyright Â© ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file is generated by custom SKELETON Xcode template.
//

import Foundation
import PromiseKit

protocol DatabaseReaderProtocol {
    
    associatedtype ReadType: Codable
    
    /// Efficiently saves Updatable object to the database.
    ///
    /// - Parameters:
    ///   - objectToImport: Object to be imported to database
    ///   - id: id for searching existing object and update it if found
    ///   - idKey: Id key for search
    ///   - writer: DatabaseWriter object for operations
    /// - Returns: An empty promise when the work is finished
    ///
    @discardableResult
    static func exportRemote(with id: Int64, idKey: String) -> ReadType?
    
    /// Efficiently saves Updatable object list to the database.
    ///
    /// - Parameters:
    ///   - objectsToImport: Objects to be imported to database
    ///   - writer: DatabaseWriter object for operations
    /// - Returns: An empty promise when the work is finished
    ///
    @discardableResult
    static func exportRemoteList(with predicate: NSPredicate?)  -> [ReadType]?
    
    static func count(predicate: NSPredicate) -> Int
}

extension DatabaseReaderProtocol {
    
    @discardableResult
    static func exportRemote(with id: Int64, idKey: String = "id") -> ReadType? {
        return exportRemote(with: id, idKey: idKey)
    }
}


class AppDatabaseExporter<ExportedType: Codable> {}

extension AppDatabaseExporter: DatabaseReaderProtocol where ExportedType: CoreDataCompatible {
    
    typealias Reader = CoreDataReader
    typealias ReadType = ExportedType
    
    static func count(predicate: NSPredicate) -> Int {
        return Reader<ReadType>.count(predicate: predicate)
    }
    
    static func exportRemote(with id: Int64, idKey: String) -> ReadType? {
        return Reader<ReadType>.exportRemote(with: id, idKey: idKey)
    }
    
    static func exportRemoteList(with predicate: NSPredicate?) -> [ReadType]? {
       return Reader<ReadType>.exportRemoteList(with: predicate)
    }
}
