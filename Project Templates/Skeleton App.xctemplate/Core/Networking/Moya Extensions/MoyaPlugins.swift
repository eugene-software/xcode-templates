//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//  Copyright Â© ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file is generated by custom SKELETON Xcode template.
//

import Foundation
import Moya
import KeychainAccess


internal extension NetworkLoggerPlugin.Configuration.LogOptions {
    
    /// Custom needed components will be logged.
    static let custom: NetworkLoggerPlugin.Configuration.LogOptions = [requestMethod, requestBody,
                                                                          successResponseBody, errorResponseBody]
}

/// Logger plugin provides an ability to log requests and responses to the console for easier debugging
///
internal let loggerPlugin: NetworkLoggerPlugin = {
    
    let formatter = NetworkLoggerPlugin.Configuration.Formatter(requestData: JSONResponseDataFormatter,
                                                                responseData: JSONResponseDataFormatter)
    
    let configuration = NetworkLoggerPlugin.Configuration(formatter: formatter, logOptions: .custom)
    return NetworkLoggerPlugin(configuration: configuration)
}()


/// Data formatter to be used for printing logs in console
/// - Parameters:
///   - data: logging data to be logged in the console
/// - Returns: data object with .prettyPrinted property
///
fileprivate func JSONResponseDataFormatter(_ data: Data) -> String {
    do {
        let dataAsJSON = try JSONSerialization.jsonObject(with: data)
        let prettyData =  try JSONSerialization.data(withJSONObject: dataAsJSON, options: .prettyPrinted)
        return String(data: prettyData, encoding: .utf8) ?? ""
    } catch {
        return String(data: data, encoding: .utf8) ?? ""
    }
}

