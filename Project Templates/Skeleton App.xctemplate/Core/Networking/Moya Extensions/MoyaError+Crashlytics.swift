//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//  Copyright Â© ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file is generated by custom SKELETON Xcode template.
//

import Foundation
import Moya
import Alamofire
import FirebaseCrashlytics

internal extension MoyaError {
    
    func logToCrashlytics(with evError: NetworkApiError) {
        
        let toBePassed = [NSURLErrorCancelled, NSURLErrorTimedOut, NSURLErrorNotConnectedToInternet]
        
        if case .underlying(let err, _) = self,
           let afErr = err as? Alamofire.AFError,
           let code = afErr.underlyingError?._code, toBePassed.contains(code) {
            return
        }
        
        if case .statusCode = self { return }
        let responseData = try? self.response?.mapJSON()
        let nsError = NSError(domain: ev_qualityAssuranceDescription, code: 0, userInfo: [ "NSError: " : self,
                                                                                           "Response: ": self.response?.response as Any,
                                                                                           "Mapped Data: ": responseData ?? ""])
        
        Crashlytics.crashlytics().record(error: nsError)
    }
    
    /// Converts a MoyaError into a suitable text description that can be shown in
    /// QA builds for helping to diagnose issues.
    ///
    /// THIS SHOULD NOT BE SHOWN TO USERS IN PRODUCTION.
    var ev_qualityAssuranceDescription: String {
        
        switch self {
        case .objectMapping(let error, _):
            if let decodingError = error as? DecodingError {
                switch decodingError {
                case .dataCorrupted:
                    return "MoyaError.objectMapping.decodingError.dataCorrupted"
                case .keyNotFound:
                    return "MoyaError.objectMapping.decodingError.keyNotFound"
                case .typeMismatch:
                    return "MoyaError.objectMapping.decodingError.typeMismatch"
                case .valueNotFound:
                    return "MoyaError.objectMapping.decodingError.valueNotFound"
                @unknown default: return ""
                }
            } else {
                return "MoyaError.objectMapping"
            }
        case .jsonMapping:
            return "MoyaError.jsonMapping"
        case .statusCode:
            return "MoyaError.statusCode"
        case .imageMapping:
            return "MoyaError.imageMapping"
        case .stringMapping:
            return "MoyaError.stringMapping"
        case .underlying:
            return "MoyaError.underlying"
        case .encodableMapping:
            return "MoyaError.encodableMapping"
        case .parameterEncoding:
            return "MoyaError.parameterEncoding"
        case .requestMapping:
            return "MoyaError.requestMapping"
        }
    }
}
