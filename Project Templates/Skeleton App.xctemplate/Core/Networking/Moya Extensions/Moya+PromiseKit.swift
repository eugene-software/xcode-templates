//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//  Copyright Â© ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file is generated by custom SKELETON Xcode template.
//

import Moya
import PromiseKit

extension Moya.MoyaProvider {
    
    /// Adopts default `request` method to use PromiseKit
    ///
    func request(_ target: Target, callbackQueue: DispatchQueue? = .none, progress: ProgressBlock? = .none) -> Promise<Moya.Response> {
        return Promise { seal in
            
            self.request(target, callbackQueue: callbackQueue, progress: progress, completion: { (result) in
                switch result {
                case .success(let response):
                    seal.fulfill(response)
                    
                case .failure(let moyaError):
                    seal.reject(moyaError)
                }
            })
        }
    }
}

extension Moya.Response {
    
    /// Adopts default `filterSuccessfulStatusCodes` method to use PromiseKit
    ///
    func filterSuccessfulStatusCodes() -> Promise<Moya.Response> {
        return Promise { seal in
            do {
                let response: Moya.Response = try self.filterSuccessfulStatusCodes()
                seal.fulfill(response)
            } catch {
                seal.reject(error)
            }
        }
    }
}


extension Moya.Response {
    
    /// Adopts default `map` method to use PromiseKit
    ///
    func promiseMap<D: Decodable>(_ type: D.Type, atKeyPath keyPath: String? = .none, using decoder: JSONDecoder = JSONDecoder(), failsOnEmptyData: Bool = true) -> Promise<D> {
        
        return Promise { seal in
            do {
                let value: D = try self.map(D.self, atKeyPath: keyPath, using: decoder, failsOnEmptyData: failsOnEmptyData)
                seal.fulfill(value)
            } catch {
                seal.reject(error)
            }
        }
    }
}
