//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//  Copyright Â© ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file is generated by custom SKELETON Xcode template.
//

import Foundation

infix operator <<->: AssignmentPrecedence
infix operator <<=>: AssignmentPrecedence

/// Assignment operator that checks values for equality before assigning
///
/// - Parameters:
///   - to: Destination for assignment. Will only be assigned to `from` if they are not equal
///   - from: Source for assignment.
func <<-> <T>(to: inout T, from: T) where T: Equatable  {
    if to == from {
        return
    }
    to = from
}

/// Assignment operator that checks values for equality before assigning
///
/// - Parameters:
///   - to: Destination for assignment. Will only be assigned to `from` is not `null` and are not equal
///   - from: Source for assignment.
func <<-> <T>(to: inout T?, from: T?) where T: Equatable  {
    guard let from = from, to != from else { return }
    to = from
}

/// Assignment operator that checks values for equality before assigning
///
/// - Parameters:
///   - to: Destination for assignment. Will only be assigned to `from` if they are not equal
///   - from: Source for assignment.
func <<=> <T>(to: inout T?, from: T?) where T: Equatable  {
    guard to != from else { return }
    to = from
}


/// Assignment operator that checks values for equality and unwraps before assigning
///
/// - Parameters:
///   - to: Destination for assignment. Will only be assigned to `from` if they are not equal, and `from` is not `nil`
///   - from: Source for assignment.
func <<-> <T>(to: inout T, from: T?) where T: Equatable  {
    guard let from = from else { return }
    to <<-> from
}
