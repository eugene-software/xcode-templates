//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//  Copyright Â© ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file is generated by custom SKELETON Xcode template.
//

import UIKit

// Managing App State Restoration
public extension AppBehaviorDispatcher {

    @available(iOS 6.0, *)
    func application(_ application: UIApplication, viewControllerWithRestorationIdentifierPath identifierComponents: [String], coder: NSCoder) -> UIViewController? {
        
        for behavior in behaviors {
            if let viewController = behavior.application?(application, viewControllerWithRestorationIdentifierPath: identifierComponents, coder: coder) {
                return viewController
            }
        }
        
        return nil
    }

    @available(iOS 6.0, *)
    func application(_ application: UIApplication, shouldSaveApplicationState coder: NSCoder) -> Bool {
        
        var result = false
        
        for behavior in behaviors {
            if behavior.application?(application, shouldSaveApplicationState: coder) ?? false {
                result = true
            }
        }
        
        return result
    }

    @available(iOS 6.0, *)
    func application(_ application: UIApplication, shouldRestoreApplicationState coder: NSCoder) -> Bool {
        
        var result = false
        
        for behavior in behaviors {
            if behavior.application?(application, shouldRestoreApplicationState: coder) ?? false {
                result = true
            }
        }
        
        return result
    }

    @available(iOS 6.0, *)
    func application(_ application: UIApplication, willEncodeRestorableStateWith coder: NSCoder) {
        
        for behavior in behaviors {
            behavior.application?(application, willEncodeRestorableStateWith: coder)
        }
    }

    @available(iOS 6.0, *)
    func application(_ application: UIApplication, didDecodeRestorableStateWith coder: NSCoder) {
        
        for behavior in behaviors {
            behavior.application?(application, didDecodeRestorableStateWith: coder)
        }
    }
}
