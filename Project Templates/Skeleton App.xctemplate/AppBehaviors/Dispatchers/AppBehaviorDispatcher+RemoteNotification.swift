//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//  Copyright Â© ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file is generated by custom SKELETON Xcode template.
//

import UIKit

// Handling Remote Notifications
public extension AppBehaviorDispatcher {

    @available(iOS 3.0, *)
    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
        
        for behavior in behaviors {
            behavior.application?(application, didRegisterForRemoteNotificationsWithDeviceToken: deviceToken)
        }
    }

    @available(iOS 3.0, *)
    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
        
        for behavior in behaviors {
            behavior.application?(application, didFailToRegisterForRemoteNotificationsWithError: error)
        }
    }

    // This delegate method offers an opportunity for applications with the "remote-notification" background mode to fetch
    // appropriate new data in response to an incoming remote notification. You should call the fetchCompletionHandler as
    // soon as you're finished performing that operation, so the system can accurately estimate its power and data cost.
    //
    // This method will be invoked even if the application was launched or resumed because of the remote notification.
    // The respective delegate methods will be invoked first. Note that this behavior is in contrast to
    // application:didReceiveRemoteNotification:, which is not called in those cases, and which will not be invoked if
    // this method is implemented.
    @available(iOS 7.0, *)
    func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Swift.Void) {
        
        apply({ (behavior, completionHandler) -> Void? in
            behavior.application?(application, didReceiveRemoteNotification: userInfo, fetchCompletionHandler: completionHandler)
        }, completionHandler: { results in
            let result = results.min(by: { $0.rawValue < $1.rawValue }) ?? .noData
            completionHandler(result)
        })
    }
}
